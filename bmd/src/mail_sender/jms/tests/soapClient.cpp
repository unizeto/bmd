/* soapClient.cpp
   Generated by gSOAP 2.7.10 from mq.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.10 2010-01-12 13:45:44 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__put(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _messageBody, std::string _messageType, std::string _messageSender, struct ns1__putResponse &_param_1)
{	struct ns1__put soap_tmp_ns1__put;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.156.209:8081/MessageRouter-Router/QueueManager";
	if (!soap_action)
		soap_action = "";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__put._messageBody = _messageBody;
	soap_tmp_ns1__put._messageType = _messageType;
	soap_tmp_ns1__put._messageSender = _messageSender;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__put(soap, &soap_tmp_ns1__put);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__put(soap, &soap_tmp_ns1__put, "ns1:put", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__put(soap, &soap_tmp_ns1__put, "ns1:put", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_ns1__putResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_ns1__putResponse(soap, &_param_1, "ns1:putResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
