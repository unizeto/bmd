#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
#

AC_PREREQ(2.59)
AC_INIT([BMD],[0.4],[someone@somewhere.com])
AC_CANONICAL_SYSTEM
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(BMD,0.4)

AC_CONFIG_SRCDIR(src/)
AM_CONFIG_HEADER(src/config.h)


# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CC_STDC
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET
#AC_PROG_RANLIB
AC_PROG_CPP
AC_PROG_LIBTOOL

# AM_PATH_CHECK

dnl xml

AC_ARG_ENABLE(xml,[  --enable-xml		build with XML support(default=yes)],
    enable_xml="$enableval",
    enable_xml="yes"
)
AM_CONDITIONAL(BUILD_XML,[ test "x${enable_xml}" == "xyes" ])

AC_ARG_ENABLE(client,[  --enable-client		build client application(default=yes)],
    enable_client="$enableval",
    enable_client="no"
)

AC_ARG_ENABLE(esp,[  --enable-esp		build ESP client binary(default=yes)],
    enable_esp="$enableval",
    enable_esp="no"
)

AC_ARG_ENABLE(cgi,[  --enable-cgi		build cgi scripts(default=no)],
    enable_cgi="$enableval",
    enable_cgi="no"
)
AM_CONDITIONAL(BUILD_CGI,[ test "x${enable_cgi}" == "xyes" ])

AC_ARG_ENABLE(stack-protector,[  --enable-stack-protector		build with stack-protector(default=yes, if present)],
    [ enable_stack_protector="${enableval}" ],
    [ enable_stack_protector="${stack_protector_present}" ]
)

if test "x$enable_stack_protector" == "xyes" ; then
	CFLAGS="${CFLAGS}"
	CXXFLAGS="${CXXFLAGS}"
fi

AC_ARG_ENABLE(server,[  --enable-server		build bmd server(default=yes)],
    enable_server="$enableval",
    enable_server="yes"
)


AC_ARG_ENABLE(libs,[  --enable-libs		build libs(default=yes)],
    enable_libs="$enableval",
    enable_libs="yes"
)

AC_ARG_ENABLE(tests,[  --enable-tests		build tests(default=no)],
    enable_tests="$enableval",
    enable_tests="no"
)


AC_ARG_ENABLE(debug,[  --enable-debug		build in debug mode],
 if test "x$enableval" != "xno" ; then
 	enable_debug=yes
 fi
 ,
 enable_debug=no
)

AC_ARG_ENABLE(vdebug,[  --enable-vdebug		build in verbose debug mode],
 if test "x$enableval" != "xno" ; then
    AC_DEFINE([_VERBOSE_DEBUG_],[1],[Enable verbose debug mode])
    enable_debug=yes
    enable_vdebug=yes
 fi
 ,
 enablevdebug=no
)

if test "x$enable_xml" != "xno" ; then
	PKG_CHECK_MODULES(XML, libxml-2.0)

	CPPFLAGS="${CPPFLAGS} ${XML_CFLAGS}"
	LIBS="${LIBS} ${XML_LIBS}"


	PKG_CHECK_MODULES(XSLT, libxslt)
	CPPFLAGS="${CPPFLAGS} ${XSLT_CFLAGS}"
	LIBS="${LIBS} ${XSLT_LIBS}"


	PKG_CHECK_MODULES(XMLSEC, xmlsec1 >= 1.0.0  libxslt,,exit)
	AC_SUBST([XMLSEC_CFLAGS])
	AC_SUBST([XMLSEC_LIBS])
dnl	LDFLAGS="${LDFLAGS}  ${XMLSEC_LIBS} "

else
	if "x$enable_esp" == "xyes" ; then
		AC_MSG_ERROR("You must use --enable-xml to build ESP client !")
	fi
	enable_esp=false
fi

AM_CONDITIONAL(BUILD_ESP,[ test "x${enable_esp}" == "xyes" ])


dnl select OS
AC_DEFINE([__UNIX__],[1],[Building for UNIX])
AC_DEFINE([_GNU_SOURCE],[1],[Using GNU Standard])
AC_DEFINE([HAVE_OPENSSL_SSL_H],[1],[OpenSSL for gSoap])

CPP_PEDANTIC=" \
	-Wall -Werror \
	-Wendif-labels -Wshadow -Wmissing-prototypes \
	-std=gnu89"
AC_SUBST([CPP_PEDANTIC])

# SUN Solaris
if test -n "`echo $target|grep solaris`" ; then
    AC_DEFINE([_SunOS_],[1],[Building for solaris])
    AC_DEFINE([USE_WIDECHARS],[1],[Widechars])
    AC_DEFINE([__EXTENSIONS__],[1],[Widechars])
fi

#
# TYPES
#
AC_CHECK_TYPE([boolean_t],AC_DEFINE([_HAVE_BOOLEAN_T],[1],[boolean_t defined]),)
# afinowe budowanie statyczne sucks ;-)

#if test "x$enable_shared" = "xno" ; then
#	CFLAGS="${CFLAGS} -static -Wl,-Bstatic"
#	CXXFLAGS="${CXXFLAGS} -static -Wl,-Bstatic"
#	CPPFLAGS="${CPPFLAGS}"
#	LDFLAGS="${LDFLAGS} -static"
#fi

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lbind':
AC_CHECK_LIB([bind], [main])
# FIXME: Replace `main' with a function in `-lc89':
AC_CHECK_LIB([c89], [main])
# FIXME: Replace `main' with a function in `-lc_r':
AC_CHECK_LIB([c_r], [main])
# FIXME: Replace `main' with a function in `-lclntsh':
AC_CHECK_LIB([clntsh], [main])
# FIXME: Replace `dlopen' with a function in `-ldl':
AC_CHECK_LIB([dl], [dlopen])
# FIXME: Replace `main' with a function in `-lgcc':
AC_CHECK_LIB([gcc], [main])
# FIXME: Replace `main' with a function in `-libpath':
AC_CHECK_LIB([ibpath], [main])
# FIXME: Replace `kstat_open' with a function in `-lkstat':
AC_CHECK_LIB([kstat], [kstat_open])
# FIXME: Replace `scalbn' with a function in `-lm':
AC_CHECK_LIB([m], [scalbn])
# FIXME: Replace `main' with a function in `-lnnz10':
AC_CHECK_LIB([nnz10], [main])
# FIXME: Replace `yp_bind' with a function in `-lnsl':
AC_CHECK_LIB([nsl], [yp_bind])
# FIXME: Replace `main' with a function in `-lociei':
AC_CHECK_LIB([ociei], [main])
# FIXME: Replace `sched_getscheduler' with a function in `-lposix4':
AC_CHECK_LIB([posix4], [sched_getscheduler])

AC_CHECK_LIB([resolv], [res_gethostbyname],[],AC_MSG_ERROR("libresolv not usable"),[])
# FIXME: Replace `main' with a function in `-lrt':
AC_CHECK_LIB([rt], [main])
# FIXME: Replace `ntohs' with a function in `-lsocket':
AC_CHECK_LIB([socket], [ntohs])
# FIXME: Replace `main' with a function in `-lthread':
AC_CHECK_LIB([thread], [main])
# FIXME: Replace `main' with a function in `-lw':
AC_CHECK_LIB([w], [main])

# REQUIRED libs
AC_CHECK_LIB([pthread], [pthread_create],[],[
	AC_CHECK_LIB([pthread_nonshared],[],
		[AC_MSG_ERROR([libpthread not found])])
])
#Needed by some libxml2's
AC_CHECK_LIB([crypto], [AES_options],[],AC_MSG_ERROR([libcrypto not found]), [  ] )
AC_CHECK_LIB([crypt], [setkey],[],AC_MSG_RESULT([libcrypt not found]), [  ] )
AC_CHECK_LIB([ssl], [SSL_connect],[],AC_MSG_ERROR([libssl not found]), [  ] )
#CURL needs it
#IMPORTANT LINK TO PTHREAD LIBRARY IF WE USE THREADS
AC_CHECK_LIB([gpg-error], [gpg_strerror],[],AC_MSG_RESULT([gpg-error not found]), [  ] )
AC_CHECK_LIB([gpgme], [gpgme_cancel],[],AC_MSG_RESULT([gpgme not found]), [  ] )
AC_CHECK_LIB([gcrypt], [gcry_cipher_encrypt],[],AC_MSG_RESULT([gcrypt not found]), [ ] )
AC_CHECK_LIB([gnutls], [gnutls_bye],[],AC_MSG_RESULT([gnutls not found]), [  ] )
AC_CHECK_LIB([curl], [curl_easy_init],[],AC_MSG_ERROR([curl not found]), [  ])
AC_CHECK_LIB([pcre], [pcre_info],[],AC_MSG_ERROR([pcre not found]))
AC_CHECK_LIB([esmtp], [smtp_set_resent_headers],[],AC_MSG_ERROR([libesmtp not found]))
AC_CHECK_LIB([krb5], [krb5_cc_close],[],AC_MSG_RESULT([libkrb5 not found]))

# Checks for header files.
AC_FUNC_ALLOCA
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT

# required
AC_CHECK_HEADERS([arpa/inet.h fcntl.h float.h inttypes.h limits.h malloc.h \
    netdb.h netinet/in.h stddef.h stdlib.h string.h strings.h \
    sys/file.h sys/param.h sys/socket.h sys/time.h unistd.h utime.h wchar.h \
    wctype.h \
    	],
	[],
	AC_MSG_ERROR([required header file not found!]))

AC_CHECK_HEADERS( [/usr/lib/jvm/java/include/linux/jni_md.h], AC_MSG_RESULT([JDK detected]), AC_MSG_ERROR([Make sure you've JDK installed (not JRE!)]) )
# WSz : jni.h wymaga jni_md.h , wiec jesli istnieje jni_md.h, to jdk jest zainstalowane

# optional
#AC_CHECK_HEADERS([oci.h libpq-fe.h stdarg.h pcre.h pcre/pcre.h])

# AM_CONDITIONAL(WITH_ORACLE,[ test "x$ac_cv_header_oci_h" != "xno" ])

#AC_CHECK_HEADER([libpq-fe.h], HAVE_LIBPQ=true, HAVE_LIBPQ=false)
#if test "x$ac_cv_header_oci_h" == "xno" && test "x$ac_cv_header_libpq_fe_h" == "xno" ; then
#    AC_MSG_ERROR([Neither oci.h (Oracle) nor libpq-fe.h (PostgreSQL) found])
#fi

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UID_T
AC_C_VOLATILE
AC_CHECK_TYPES([ptrdiff_t])

AC_LANG_PUSH(C++)
AC_CHECK_TYPES([bool])
AC_LANG_POP(C++)

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK

dnl AC_FUNC_MALLOC - wywalone ze wzgledu na jakies dziwne rpl_malloc()
dnl AC_FUNC_MEMCMP - jw.
dnl AC_FUNC_REALLOC - jw.

AC_FUNC_MKTIME
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_FUNC_STRTOD
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit dup2 floor fs_stat_dev ftruncate getcwd gethostbyname gethostname gethrtime getpagesize gettimeofday inet_ntoa isascii localtime_r memchr memmove memset mkdir next_dev pow putenv select setenv setlocale socket sqrt strcasecmp strchr strcspn strdup strerror strncasecmp strpbrk strrchr strspn strstr strtol tzset utime])
AC_MSG_CHECKING([for tm->tm_gmtoff])
AC_COMPILE_IFELSE([
	#include <time.h>
	#include <sys/time.h>
	int main() {
	struct tm foo;
	foo.tm_gmtoff = 0;
	}
	],
	[
	AC_DEFINE(HAVE_TM_GMTOFF,1,[is tm->tm_gmtoff usable])
	AC_MSG_RESULT([yes])
	],[
	AC_MSG_RESULT([no])
	])
AM_INIT_AUTOMAKE()

#dnl Testing for gcc -fstack-protector
CFLAGS_OLD=${CFLAGS}
CFLAGS="${CFLAGS} -fstack-protector"
AC_COMPILE_IFELSE(
	[main() { }],
	[stack_protector_present=yes],
	[stack_protector_present=no] )
CFLAGS=${CFLAGS_OLD}

CPPFLAGS=" ${CPPFLAGS} \
    -I \${top_srcdir}/include/bmd/\`basename \${PWD} \` \
    -I \${top_srcdir}/include \
    -I \${top_srcdir}/include/bmd/common \
    -I \${top_srcdir}/include/pkcs11 \
    -include  \${top_srcdir}/src/config.h \
"

#LDFLAGS="\` sh \${top_srcdir}/src/generate_ldflags.sh  \${top_srcdir} \` "



AC_CONFIG_FILES([
	
	src/libbmdaa2/Makefile
	src/libbmdaa2/ac_server/Makefile
	src/libbmdaa2/ac_client/Makefile
	src/libbmdaa2/configuration/Makefile
	src/libbmdaa2/db/Makefile
	src/libbmdaa2/db/common/Makefile
	src/libbmdaa2/db/database/Makefile
	src/libbmdaa2/db/file/Makefile
	src/libbmdaa2/pki/Makefile
	src/libbmdaa2/wrappers/Makefile

	src/libbmdasn1_core/Makefile
	src/libbmdasn1_common/Makefile

	src/libbmdbase64/Makefile
	src/libbmdlob/Makefile
	src/libbmdlog/Makefile
	src/libbmdlog/bmdlogserver/Makefile
	src/libbmdlog/root_server/Makefile
	src/libbmdlog/balance/Makefile
	src/libbmdlog/tree_build/Makefile
	src/libbmdlog/log_server_utils/Makefile
	src/libbmdlog/textbmdlog/Makefile
	src/libbmdlog/verify_logs/Makefile
	src/libbmdlog/jmslogfetcher/Makefile
	src/libbmdlog/soap_server/Makefile
	src/libbmdlog/soap_server/server/Makefile
	src/libbmdlog/soap_server/tests/Makefile

	src/libbmdconfig/Makefile
	src/libbmdcms/Makefile
	src/libbmdts/Makefile
	src/libbmdX509/Makefile
	src/libbmdcrl/Makefile

	src/libbmddb/db2/Makefile
	src/libbmddb/Makefile
	
	src/libbmdsql/Makefile
	src/libbmdsql/tools/Makefile


	src/libbmddialogs/Makefile
	src/libbmdnet/Makefile
	src/libbmdpkcs11/Makefile
	src/libbmdpkcs12/Makefile
	src/libbmdpki/Makefile
	src/libbmdks/Makefile
	src/bmd_ks/Makefile
	
	src/libbmdpr/Makefile
	src/libbmdpr/bmd_datagram/Makefile
	src/libbmdpr/bmd_resp/Makefile
	src/libbmdpr/prlib-common/Makefile
	src/libbmdpr/bmd_datagram/asn1clib/Makefile
	src/libbmdpr/bmd_resp/asn1clib/Makefile
	src/libbmdpr/bmd_resp/prlib/Makefile

	src/libbmdutils/Makefile
	src/libbmdprotocol/Makefile
	src/libbmd/Makefile
	src/libbmdxades/Makefile
	src/libbmdxml/Makefile

	src/libbmdmail/Makefile
	src/libbmdmime/Makefile

	src/libbmddvcs/Makefile
	src/libbmdarchpack/Makefile
	src/libbmdglobals/Makefile

	
	src/libbmderr/Makefile

	src/Makefile
	Makefile
	

	src/mail_sender/Makefile
	src/mail_sender/soap/Makefile
	src/mail_sender/soap/awizosender/Makefile
	src/mail_sender/soap/awizobroker/Makefile
	src/mail_sender/soap/awizosender/tests/Makefile
	src/mail_sender/jms/Makefile
	
	src/libbmdsoap/Makefile
	src/libbmdsoap/server/Makefile
	src/libbmdsoap/tests/Makefile
	
	src/libbmdcurl/Makefile
	src/libbmdzlib/Makefile
	src/libbmdxslt/Makefile
	src/libbmdxpath/Makefile
	
	src/libCppJavaApiWrapper/Makefile
	src/libCppJavaApiWrapper/tests/Makefile

])


AM_OPTIONS_DB2CONFIG

# with libs and with progs

 if test "x$enable_debug" == "xyes" ; then
    AC_DEFINE([_DEBUG_UNIX_],[1],[Enable UNIX debug mode])
    CFLAGS="$CFLAGS -ggdb3"
    CPPFLAGS="$CPPFLAGS -ggdb3"
    CXXFLAGS="$CXXFLAGS -ggdb3"
 else
 	LDFLAGS="${LDFLAGS} -s"
 fi

CFLAGS=`echo ${CFLAGS} | sed s/-O2/-O0/`
CPPFLAGS=`echo ${CPPFLAGS} -Wall | sed s/-O2/-O0/`
CXXFLAGS=`echo ${CXXFLAGS} | sed s/-O2/-O0/`


AM_PATH_DB2CONFIG

CFLAGS="${CFLAGS} ${DB2_CFLAGS}"


AM_CONDITIONAL(WITH_DB2,[ test "x${enable_db2}" != "xno" ])
if test "x$enable_db2" != "xno" ; then
	AC_DEFINE([WITH_DB2],1,[Use Db2 database])
fi


#AC_SUBST([BMDDB_LIBS])
#AC_SUBST([BMDDB_LDADD])


if test "x$enable_client" = "xyes"; then
	enable_wxwin="yes"
	enable_gui_libs="yes"
fi

if test "x$enable_gui_libs" = "xyes"; then
	enable_wxwin="yes"
fi

if test "x$enable_wxwin" = "xyes"; then
	AC_MSG_RESULT([$enable_wxwin])
	AM_OPTIONS_WXCONFIG
	AM_PATH_WXCONFIG(2.4.2, WX_WIN=1)
	if test "$WX_WIN" != 1; then
	AC_MSG_ERROR([
		Client programs build enabled, but wxWidgets cannot be used.
                wxWidgets must be installed on your system
                but wx-config script couldn't be found.

                Please check that wx-config is in path, the directory
                where wxWidgets libraries are installed (returned by
                'wx-config --libs' command) is in LD_LIBRARY_PATH or
                equivalent variable and wxWidgets version is 2.6.0 or above.
        ])
	fi
AC_SUBST([WX_CPPFLAGS])
AC_SUBST([WX_CXXFLAGS_ONLY])
AC_SUBST([WX_CFLAGS_ONLY])
AC_SUBST([WX_LIBS])
fi
AM_CONDITIONAL( [WX_WIN], [ test "x$WX_WIN" = "x1" ] )

AM_CONDITIONAL(BUILD_LIBS, [ test "x$enable_libs" = "xyes" ] )
AM_CONDITIONAL(BUILD_SERVER, [ test "x$enable_server" = "xyes" ] )
AM_CONDITIONAL(BUILD_GUI_LIBS, [ test "x$enable_gui_libs" = "xyes" ] )
AM_CONDITIONAL(BUILD_CLIENT, [ test "x$enable_client" = "xyes" ] )
AM_CONDITIONAL(BUILD_TESTS, [ test "x$enable_tests" = "xyes" ] )


AC_OUTPUT(  )

AC_MSG_RESULT([Done.])
AC_MSG_RESULT([])
AC_MSG_RESULT([BMD Release $BMD_VERSION, Build $CONFIG_DATE])
AC_MSG_RESULT([])
AC_MSG_RESULT([BUILDING TYPE $build ON $host FOR $target ])
AC_MSG_RESULT([])
AC_MSG_RESULT([Prefix:		${prefix}])
AC_MSG_RESULT([Bindir:		${bindir}])
AC_MSG_RESULT([Configuration:	${sysconfdir}])
AC_MSG_RESULT([])
AC_MSG_RESULT([enable_wx:	${enable_wx}])
AC_MSG_RESULT([wxWindows usable: ${WX_WIN}])
AC_MSG_RESULT([])
AC_MSG_RESULT([pgsql_enable:	${enable_pgsql}			${PGSQL_CONFIG}])
AC_MSG_RESULT([pgsql cflags:	${PGSQL_CFLAGS}])
AC_MSG_RESULT([pgsql include:	${PGSQL_INCLUDE}])
AC_MSG_RESULT([pgsql libs:	${PGSQL_LIBS}])
AC_MSG_RESULT([])
AC_MSG_RESULT([oracle_enable:	${enable_oracle} ${ORACLE_CONFIG}])
AC_MSG_RESULT([oracle cflags:	${ORACLE_CFLAGS}])
AC_MSG_RESULT([oracle include:	${ORACLE_INCLUDE}])
AC_MSG_RESULT([oracle libs:	${ORACLE_LIBS}])
AC_MSG_RESULT([])
AC_MSG_RESULT([])
AC_MSG_RESULT([******************************************************************])
AC_MSG_RESULT([A teraz drogie dzieci patrzcie jak zalaczamy ORACLE lub POSTGRESA:])
AC_MSG_RESULT([--enable-oracle lub --enable-postgres])
AC_MSG_RESULT([Jak nie wlaczycie to sie nie dziwcie ze nie dziala.])
AC_MSG_RESULT([******************************************************************])
AC_MSG_RESULT([               .])
AC_MSG_RESULT([              .@.                                    .])
AC_MSG_RESULT([              @m@,.                                 .@])
AC_MSG_RESULT([             .@m%nm@,.                            .@m@])
AC_MSG_RESULT([            .@nvv%vnmm@,.                      .@mn%n@])
AC_MSG_RESULT([           .@mnvvv%vvnnmm@,.                .@mmnv%vn@,])
AC_MSG_RESULT([           @mmnnvvv%vvvvvnnmm@,.        .@mmnnvvv%vvnm@])
AC_MSG_RESULT([           @mmnnvvvvv%vvvvvvnnmm@, ;;;@mmnnvvvvv%vvvnm@,])
AC_MSG_RESULT([           `@mmnnvvvvvv%vvvvvnnmmm;;@mmnnvvvvvv%vvvvnmm@])
AC_MSG_RESULT([            `@mmmnnvvvvvv%vvvnnmmm;%mmnnvvvvvv%vvvvnnmm@])
AC_MSG_RESULT([              `@m%v%v%v%v%v;%;%;%;%;%;%;%%%vv%vvvvnnnmm@])
AC_MSG_RESULT([              .,mm@@@@@mm%;;@@m@m@@m@@m@mm;;%%vvvnnnmm@;@,.])
AC_MSG_RESULT([           .,@mmmmmmvv%%;;@@vmvvvvvvvvvmvm@@;;%%vvnnm@;%mmm@,])
AC_MSG_RESULT([        .,@mmnnvvvvv%%;;@@vvvvv%%%%%%%vvvvmm@@;;%%mm@;%%nnnnm@,])
AC_MSG_RESULT([     .,@mnnvv%v%v%v%%;;@mmvvvv%%;*;*;%%vvvvmmm@;;%m;%%v%v%v%vmm@,.])
AC_MSG_RESULT([ ,@mnnvv%v%v%v%v%v%v%;;@@vvvv%%;*;*;*;%%vvvvm@@;;m%%%v%v%v%v%v%vnnm@,])
AC_MSG_RESULT([ `    `@mnnvv%v%v%v%%;;@mvvvvv%%;;*;;%%vvvmmmm@;;%m;%%v%v%v%vmm@'   '])
AC_MSG_RESULT([         `@mmnnvvvvv%%;;@@mvvvv%%%%%%%vvvvmm@@;;%%mm@;%%nnnnm@'])
AC_MSG_RESULT([            `@mmmmmmvv%%;;@@mvvvvvvvvvvmmm@@;;%%mmnmm@;%mmm@'])
AC_MSG_RESULT([               `mm@@@@@mm%;;@m@@m@m@m@@m@@;;%%vvvvvnmm@;@'])
AC_MSG_RESULT([              ,@m%v%v%v%v%v;%;%;%;%;%;%;%;%vv%vvvvvnnmm@])
AC_MSG_RESULT([            .@mmnnvvvvvvv%vvvvnnmm%mmnnvvvvvvv%vvvvnnmm@])
AC_MSG_RESULT([           .@mmnnvvvvvv%vvvvvvnnmm'`@mmnnvvvvvv%vvvnnmm@])
AC_MSG_RESULT([           @mmnnvvvvv%vvvvvvnnmm@':%::`@mmnnvvvv%vvvnm@'])
AC_MSG_RESULT([           @mmnnvvv%vvvvvnnmm@'`:::%%:::'`@mmnnvv%vvmm@])
AC_MSG_RESULT([           `@mnvvv%vvnnmm@'     `:;%%;:'     `@mvv%vm@'])
AC_MSG_RESULT([            `@mnv%vnnm@'          `;%;'         `@n%n@])
AC_MSG_RESULT([             `@m%mm@'              ;%;.           `@m@])
AC_MSG_RESULT([              @m@'                 `;%;             `@])
AC_MSG_RESULT([              `@'                   ;%;.             '    Kwiatek])
AC_MSG_RESULT([               `                    `;%;         ])
AC_MSG_RESULT([])
AC_MSG_RESULT([])
AC_MSG_RESULT([BMD server:	${enable_server}])
AC_MSG_RESULT([BMD client:	${enable_client}])
AC_MSG_RESULT([BMD libs:	${enable_libs}])
AC_MSG_RESULT([BMD gui libs:	${enable_gui_libs}])
AC_MSG_RESULT([])
AC_MSG_RESULT([CC features:])
AC_MSG_RESULT([stack protector present:	= ${stack_protector_present}])
AC_MSG_RESULT([stack protector enabled: = ${enable_stack_protector}])
AC_MSG_RESULT([])
AC_MSG_RESULT([CC       = ${CC}])
AC_MSG_RESULT([CFLAGS   = ${CFLAGS}])
AC_MSG_RESULT([CPPFLAGS = ${CPPFLAGS}])
AC_MSG_RESULT([XMLFLAGS = ${XMLSEC_CFLAGS}])
AC_MSG_RESULT([LDFLAGS  = ${LDFLAGS}])
AC_MSG_RESULT([LIBS     = ${LIBS}])
AC_MSG_RESULT([])
AC_MSG_RESULT([])
AC_MSG_RESULT([***************************************************************])
AC_MSG_RESULT([* PLEASE USE AM_CPPFLAGS=\${CPP_PEDANTIC} WHERE POSSIBLE.     *])
AC_MSG_RESULT([* VERWENDEN SIE BITTE AM_CPPFLAGS=\${CPP_PEDANTIC} WO MöGLICH *])
AC_MSG_RESULT([* PROSZĘ UŻYWAĆ AM_CPPFLAGS=\${CPP_PEDANTIC} GDZIE MOŻLIWE    *])
AC_MSG_RESULT([***************************************************************])
AC_MSG_RESULT([])

